{"version":3,"sources":["components/card/card.cpn.jsx","components/card-list/card-list.cpn.jsx","components/search-box/search-box.cpn.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsterList","map","key","SearchBox","placeholder","changeHandler","type","onChange","App","e","setState","searchField","target","value","state","monsters","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qVAIaA,G,YAAO,SAACC,GACjB,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACR,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCJjBC,G,MAAW,SAACR,GACrB,OACI,yBAAKC,UAAU,aAEPD,EAAMS,YAAYC,KAAI,SAAAN,GAAO,OACxB,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,UCPxCQ,G,MAAY,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,cACrC,OACI,6BACI,2BAAOb,UAAU,aACbc,KAAK,SACLF,YAAaA,EACbG,SAAUF,OC6FXG,E,YAhGX,WAAYjB,GAAQ,IAAD,8BACf,4CAAMA,KAiBVc,cAAgB,SAACI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAhBtC,EAAKC,MAAQ,CACTC,SAAU,GACVJ,YAAa,IALF,E,iFAWE,IAAD,OAChBK,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAAEK,SAAUK,S,+BAQxC,MAG6BC,KAAKP,MAA/BC,EAHH,EAGGA,SAAUJ,EAHb,EAGaA,YAEZW,EAAmBP,EAASQ,QAAO,SAAA5B,GAAO,OAC5CA,EAAQE,KAAK2B,cAAcC,SAASd,EAAYa,kBAGpD,OACI,yBAAKhC,UAAU,OAOX,gDAEA,kBAAC,EAAD,CAAWY,YAAY,kBAAkBC,cAAegB,KAAKhB,gBAG7D,kBAAC,EAAD,CAAUL,YAAasB,S,GA9CrBI,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.40030070.chunk.js","sourcesContent":["import React from \"react\";\n\nimport './card.style.css';\n\nexport const Card = (props) => {\n    return (\n        <div className='card-container'>\n            <img alt='monster'\n                 src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n            <h2>{props.monster.name}</h2>\n            <p>{props.monster.email}</p>\n        </div>\n    );\n}\n","import React from 'react';\n\nimport {Card} from \"../card/card.cpn\";\n\nimport './card-list.style.css';\n\nexport const CardList = (props) => {\n    return (\n        <div className='card-list'>\n            {\n                props.monsterList.map(monster =>\n                    (<Card key={monster.id} monster={monster} />))\n            }\n        </div>\n    );\n}\n","import React from 'react';\n\nimport './search-box.style.css';\n\nexport const SearchBox = ({ placeholder, changeHandler }) => {\n    return (\n        <div>\n            <input className='search-box'\n                type='search'\n                placeholder={placeholder}\n                onChange={changeHandler}\n            />\n        </div>\n    );\n}","import React from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.cpn';\nimport { SearchBox } from './components/search-box/search-box.cpn';\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            monsters: [],\n            searchField: ''\n        };\n\n        //this.changeHandler = this.changeHandler.bind(this);\n    };\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({ monsters: users }));\n    }\n\n    //event-driven function (ES6 feature - arrow function)\n    changeHandler = (e) => {\n        this.setState({ searchField: e.target.value });\n    }\n\n    render() {\n        //console.log(this.state.monsters.name);\n\n        const { monsters, searchField } = this.state;\n\n        const filteredMonsters = monsters.filter(monster =>\n            monster.name.toLowerCase().includes(searchField.toLowerCase()));\n\n\n        return (\n            <div className=\"App\">\n                {/* <input\n                    type='search'\n                    placeholder='Search monsters'\n                    onChange={e => this.setState({ searchField: e.target.value }, () => console.log(this.state))} //=> JSX event, not html event\n                /> */}\n\n                <h1>Monsters Rodolex</h1>\n\n                <SearchBox placeholder='Search monsters' changeHandler={this.changeHandler} />\n\n                {/* <CardList monsterList={this.state.monsters} /> */}\n                <CardList monsterList={filteredMonsters} />\n\n                {/*<header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                    <p>\n                        <h1>{ this.state.welcome_string }</h1><br/>\n\n                        <button onClick={() => this.setState({welcome_string: 'Hello, dbuiviet! Welcome to React!'})}>\n                            Change text\n                        </button>\n\n                        <br/>Edit <code>src/App.js</code> and save to reload.\n                    </p>\n\n                    <a\n                        className=\"App-link\"\n                        href=\"https://reactjs.org\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        Learn React\n                    </a>\n                </header>*/}\n            </div>\n        )\n    };\n\n\n}\n\n/*function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          <h1>Hello, dbuiviet</h1><br/>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}*/\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}